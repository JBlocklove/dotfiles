#!/bin/sh

##LAYOUT=`ls -1 $XDG_CONFIG_HOME/screenlayout | cut -d'.' -f1 | dmenu -c -l 20 -p "monitor:"`
#
##$XDG_CONFIG_HOME/screenlayout/$LAYOUT.sh
#
#
#XRANDR=$(which xrandr)
#
#MONITORS=( $( ${XRANDR} | awk '( $2 == "connected" ){ print $1 }' ) )
#
#NUM_MONITORS=${#MONITORS[@]}
#
#TITLES=()
#COMMANDS=()
#
#
#function gen_xrandr_only()
#{
#    selected=$1
#
#    cmd="xrandr --output ${MONITORS[$selected]} --auto "
#
#    for entry in $(seq 0 $((${NUM_MONITORS}-1)))
#    do
#        if [ $selected != $entry ]
#        then
#            cmd="$cmd --output ${MONITORS[$entry]} --off"
#        fi
#    done
#
#    echo $cmd
#}
#
#
#
#declare -i index=0
#for entry in $(seq 0 $((${NUM_MONITORS}-1)))
#do
#    TILES[$index]="Only ${MONITORS[$entry]}"
#    COMMANDS[$index]=$(gen_xrandr_only $entry)
#    index+=1
#done
#
###
## Dual screen options
###
#for entry_a in $(seq 0 $((${NUM_MONITORS}-1)))
#do
#    for entry_b in $(seq 0 $((${NUM_MONITORS}-1)))
#    do
#        if [ $entry_a != $entry_b ]
#        then
#            TILES[$index]="Dual Screen ${MONITORS[$entry_a]} -> ${MONITORS[$entry_b]}"
#            COMMANDS[$index]="xrandr --output ${MONITORS[$entry_a]} --auto \
#                              --output ${MONITORS[$entry_b]} --auto --left-of ${MONITORS[$entry_a]}"
#
#            index+=1
#        fi
#    done
#done
#
#
###
## Clone monitors
###
#for entry_a in $(seq 0 $((${NUM_MONITORS}-1)))
#do
#    for entry_b in $(seq 0 $((${NUM_MONITORS}-1)))
#    do
#        if [ $entry_a != $entry_b ]
#        then
#            TILES[$index]="Clone Screen ${MONITORS[$entry_a]} -> ${MONITORS[$entry_b]}"
#            COMMANDS[$index]="xrandr --output ${MONITORS[$entry_a]} --auto \
#                              --output ${MONITORS[$entry_b]} --auto --same-as ${MONITORS[$entry_a]}"
#
#            index+=1
#        fi
#    done
#done
#
#
#
###
##  Generate entries, where first is key.
###
#function gen_entries()
#{
#	for layout in "${layouts[@]}"; do
#		echo $layout
#	done
#    for a in $(seq 0 $(( ${#TILES[@]} -1 )))
#    do
#        echo ${TILES[a]}
#    done
#}
#
# Call menu
function rofi_get_layouts()
{
	local layouts=(`ls -1 $XDG_CONFIG_HOME/screenlayout | cut -d'.' -f1`)
	echo -en "\0prompt\x1fMonitor\n"
	for layout in "${layouts[@]}"; do
		echo $layout
	done
	local screens=$(xrandr | grep ' connected' | cut -d ' ' -f1)
	echo "$screens"
}

function check_if_layout()
{
	local layout="$1"
	local layouts=(`ls -1 $XDG_CONFIG_HOME/screenlayout | cut -d'.' -f1`)
	for l in "${layouts[@]}"; do
		if [[ "$l" == "$layout" ]]; then
			echo "true"
			return
		fi
	done
	echo "false"
}

function set_xrandr_monitor()
{
	local monitor="$1"
	local screens=$(xrandr | grep ' connected' | cut -d ' ' -f1)
	local cmd="xrandr --output $monitor --auto "
	for screen in $screens; do
		if [[ "$screen" != "$monitor" ]]; then
			cmd="$cmd --output $screen --off"
		fi
	done
	eval $cmd
}

if [[ -z "$@" ]]; then
	rofi_get_layouts
else
	#layout="$(echo -e "$1" | awk '{print $1}')"
	if [[ $(check_if_layout "$1") == "true" ]]; then
		$XDG_CONFIG_HOME/screenlayout/$1.sh
	else
		set_xrandr_monitor "$1"
	fi
	wm_set_last_wp
fi

