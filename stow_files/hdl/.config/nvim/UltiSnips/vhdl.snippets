# Shamelessly stolen from
# https://github.com/zivv/UltiSnips/blob/master/vhdl.snippets

#Updated by Jason Blocklove
global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 50 - 19)
	output = list()
	for line in lines:
		output.append('-'*2 + ' '*17 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]
endglobal

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet header "File header"
-------------------------------------------------
--  File:          `!p snip.rv = fn`
--
--  Entity:        `!p snip.rv = snip.fn.split(".")[0]`
--  Architecture:  ${1:behavioral}
--  Author:        ${2:Jason Blocklove}
--  Created:       `date +%m/%d/%y`
--  Modified:      ${3}
--  VHDL'93
--  Description:   The following is the entity and
--                 architectural description of a
--                 ${4:I need a really long default here so I don't have to type so much !}
-------------------------------------------------
${0}
endsnippet


snippet lib "library ieee; | use ieee.std_logic_1164.all;"
library ieee;
use ieee.std_logic_1164.all;
endsnippet

snippet uun "use ieee.std_logic_unsigned.all;"
use ieee.std_logic_unsigned.all;
endsnippet

snippet num "use ieee.numeric_std.all;"
use ieee.numeric_std.all;
endsnippet

snippet ent "entity ... ; | architecture ...;"
entity ${1:} is
	port(
	);
end $1;

architecture ${2:behavioral} of $1 is
begin
	${0}
end $2;
endsnippet

snippet genent "entity ... ; | architecture ...;"
entity ${1:} is
	generic(
	);
	port(
	);
end $1;

architecture ${2:behavioral} of $1 is
begin
	${0}
end $2;
endsnippet

snippet with "with ... select"
with ${1} select
	${2} <=
endsnippet

snippet comp "component"
component ${VISUAL}${0}
	Port(
	);
end component;
endsnippet

snippet pm "...: ... port map(...);"
${1}: ${2} port map(${3});
endsnippet

snippet type "type ... is (...);"
type ${1} is (${2});
endsnippet

snippet proc "... : process (...) ..."
${1} : process (${2:${VISUAL}}) begin
${0}
end process;
endsnippet

snippet ifup "if rising_edge(clk) then ..."
if rising_edge(${1:clk}) then
${VISUAL}${0}
end if;
endsnippet

snippet elsup "elsif rising_edge(clk) then ..."
elsif rising_edge(${1:clk}) then
${VISUAL}${0}
end if;
endsnippet

snippet case "case ... is ..."
case ${VISUAL}${0} is
	when others => '0';
end case;
endsnippet

snippet clkproc "clk_proc : process ..."
${1}:process
begin
	clk <= '1';
	wait for ${2:50 ns};
	clk <= '0';
	wait for $2;
end process;
${0}
endsnippet

snippet assert "assert ... report ... severity ...;"
assert ${1:condition}
	report ${2:"string"}
	severity ${3:error};
endsnippet

snippet end "report Testbench Concluded severity failure;"
report "Testbench Concluded" severity failure;
endsnippet
