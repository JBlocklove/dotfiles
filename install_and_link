#!/bin/bash

###################################
# Installs and links a package
# Works with stow
# Many aspects stolen from www.github.com/Serubin/dotfiles
##################################

# Takes in input (yes or no) defaults to yes, but can default to no with a parameter
function getInputBoolean() {
	if [[ $2 == "no" ]]; then
        read -p "${1} (Y/n) " in;
	else
        read -p "${1} (y/N) " in;
	fi

    if [ "$in" == "y" ]; then
            echo 1;
    elif [ "$in" == "n" ]; then
            echo 0;
    else
		if [[ $2 == "no" ]]; then
			echo 0;
		else
			echo 1;
		fi
    fi
}

# Uses lsb-release to determine what OS is being used
function detectos(){

	# Get *nix distro
	DISTRO_RAW="" # Gets raw os output
	DISTRO_RAW_LOC=`echo /etc/*-release` 2> /dev/null

	# If DISTRO_RAW_LOC still contains the '*' (didn't use regex) empty DISTRO_RAW_LOC
	if [[ "$DISTRO_RAW_LOC" == "/etc/*-release" ]]; then
	        DISTRO_RAW_LOC="";
	fi

	# get contents of uname or lsb-release
	if [[ "$DISTRO_RAW_LOC" != "" ]]; then
	        DISTRO_RAW=$(cat /etc/*-release 2> /dev/null)
	else
	        DISTRO_RAW=$(uname)
	fi
	# Parses out specific distro
	export DISTRO=`echo $DISTRO_RAW | perl -lne '/(Ubuntu)|(Debian)|(Darwin)|(Arch)|(Fedora)/gi && print $&' | head -n1`

}

function addDeps(){
	echo Installing GNU Stow as a dependency for all package linking
	case $DISTRO in
		"Arch")
			sudo pacman --noconfirm --needed -S stow
			;;
		"Ubuntu")
			sudo apt install -y stow
			;;
		*)
			echo "NON-SUPPORTED OS -- Please install Stow if able"
			continue=`getInputBoolean "NON-SUPPORTED OS -- Please install GNU Stow if able. Continue?" "no"`
			;;
		esac
}

export DOTFILES_INSTALL="$(dirname $(readlink -f $0))"
# usage statement
USAGE="Usage: install_and_link <prog1> <prog2> ... <progN>"

AVAILABLE_PROGS=($(ls -d -1 program_installs/*/ | cut -d'/' -f2))
#for val in "${AVAILABLE_PROGS[@]}"; do
#	echo "$val"
#done
if [[ "$#" -eq 0 ]]; then
	echo $USAGE
	exit 1
fi

if [[ "$@" == "all" ]]; then
	INSTALL_ALL=1
	INSTALL_PROGS=("${AVAILABLE_PROGS[@]}")
elif [[ "$@" == "list" ]]; then
	echo "${AVAILABLE_PROGS[*]}"
	exit 0
else
	INSTALL_ALL=0
	INSTALL_PROGS=("$@")
fi
echo "--------- Installing -----------"

# get OS distro
detectos

addDeps

echo ""

for PROG in "${INSTALL_PROGS[@]}"; do
	in_arr=0
	for i in "${AVAILABLE_PROGS[@]}"; do
		if [[ $PROG == $i ]]; then
			in_arr=1
			break
		fi
	done
	if [[ $in_arr != 1 ]]; then
		echo "${PROG} is not an installable program, skipping..."
		continue
	fi
	echo "Installing ${PROG}..."
	PACKAGE_INSTALL="program_installs/${PROG}"
	    # Every package must have a name.info file in it's directory. It must contain:
        # * supported oses (exported to package_support [comma delemiter])
        # * Brief description of the package (echoed)
        # * Additional packages installed (not including dependancies, echoed)
	source "${PACKAGE_INSTALL}/${PROG}.info"
	PRE_INSTALL_OPTIONS

    package_supported=`echo $package_support | grep -o $DISTRO`

    if [ "$package_supported" != "$DISTRO" ]; then
        echo "${PROG} cannot be installed on ${DISTRO}."
        continue
    fi

    echo "Attempting to install ${PROG}..."
    # Os specific
    if [[ "$DISTRO" == "Debian" ]] || [[ "$DISTRO" == "Ubuntu" ]]; then
        source "${PACKAGE_INSTALL}/${PROG}.debian"
    elif [[ "$DISTRO" == "Darwin" ]]; then
        source "${PACKAGE_INSTALL}/${PROG}.osx"
    elif [[ "$DISTRO" == "Arch" ]]; then
        source "${PACKAGE_INSTALL}/${PROG}.arch"
    elif [[ "$DISTRO" == "Fedora" ]]; then
        source "${PACKAGE_INSTALL}/${PROG}.fedora"
    else
        # FYI: This shouldn't ever happen - make an issue if it does?
        echo "ERROR: This os doesn't support ${PROG} installations."
        continue
    fi

	# Common stuff and linking
    if [ -r "${PACKAGE_INSTALL}/${PROG}.sh" ]; then
        source ${PACKAGE_INSTALL}/${PROG}.sh
    fi
done

unset DOTFILES_INSTALL
